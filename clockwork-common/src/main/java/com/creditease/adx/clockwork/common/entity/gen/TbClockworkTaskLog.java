/**
 * This file is automatically generated by MyBatis Generator, do not modify.
 */
package com.creditease.adx.clockwork.common.entity.gen;

import java.util.Date;

public class TbClockworkTaskLog {
    /**
     * 主键
     */
    private Integer id;

    /**
     * task主键
     */
    private Integer taskId;

    /**
     * task名字
     */
    private String taskName;

    /**
     * 隶属作业流id
     */
    private Integer groupId;

    /**
     * 执行task的节点id
     */
    private Integer nodeId;

    /**
     */
    private String status;

    /**
     * 运行pid
     */
    private Integer pid;

    /**
     */
    private String realCommand;

    /**
     * 参数
     */
    private String parameter;

    /**
     * 日志的名字，格式：taskName_yyyyMMddHHmmss(时间格式)
     */
    private String logName;

    /**
     * 触发时间
     */
    private Date triggerTime;

    /**
     * 开始时间
     */
    private Date startTime;

    /**
     * 执行时间
     */
    private Date executeTime;

    /**
     * 运行时间，暂时为保留字段
     */
    private Date runningTime;

    /**
     * 结束时间
     */
    private Date endTime;

    /**
     * 自动调度1；手动执行0; 补数2
     */
    private Integer executeType;

    /**
     * 执行引擎
     */
    private String runEngine;

    /**
     * run script result code: 0 is success ; others are failed
     */
    private Integer returnCode;

    /**
     * 执行命令的返回信息
     */
    private String returnMsg;

    /**
     * 补数的日期
     */
    private String fillDataTime;

    /**
     * 批次号
     */
    private Long batchNumber;

    /**
     * 重跑补数批次号
     */
    private Long rerunBatchNumber;

    /**
     * 是否结束，0否1是
     */
    private Boolean isEnd;

    /**
     * 创建时间
     */
    private Date createTime;

    /**
     * 更新时间
     */
    private Date updateTime;

    /**
     * 主键
     *
     * @return id
     */
    public Integer getId() {
        return id;
    }

    /**
     * 主键
     *
     * @param id
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * task主键
     *
     * @return taskId
     */
    public Integer getTaskId() {
        return taskId;
    }

    /**
     * task主键
     *
     * @param taskId
     */
    public void setTaskId(Integer taskId) {
        this.taskId = taskId;
    }

    /**
     * task名字
     *
     * @return taskName
     */
    public String getTaskName() {
        return taskName;
    }

    /**
     * task名字
     *
     * @param taskName
     */
    public void setTaskName(String taskName) {
        this.taskName = taskName == null ? null : taskName.trim();
    }

    /**
     * 隶属作业流id
     *
     * @return groupId
     */
    public Integer getGroupId() {
        return groupId;
    }

    /**
     * 隶属作业流id
     *
     * @param groupId
     */
    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }

    /**
     * 执行task的节点id
     *
     * @return nodeId
     */
    public Integer getNodeId() {
        return nodeId;
    }

    /**
     * 执行task的节点id
     *
     * @param nodeId
     */
    public void setNodeId(Integer nodeId) {
        this.nodeId = nodeId;
    }

    /**
     *
     * @return status
     */
    public String getStatus() {
        return status;
    }

    /**
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status == null ? null : status.trim();
    }

    /**
     * 运行pid
     *
     * @return pid
     */
    public Integer getPid() {
        return pid;
    }

    /**
     * 运行pid
     *
     * @param pid
     */
    public void setPid(Integer pid) {
        this.pid = pid;
    }

    /**
     *
     * @return realCommand
     */
    public String getRealCommand() {
        return realCommand;
    }

    /**
     *
     * @param realCommand
     */
    public void setRealCommand(String realCommand) {
        this.realCommand = realCommand == null ? null : realCommand.trim();
    }

    /**
     * 参数
     *
     * @return parameter
     */
    public String getParameter() {
        return parameter;
    }

    /**
     * 参数
     *
     * @param parameter
     */
    public void setParameter(String parameter) {
        this.parameter = parameter == null ? null : parameter.trim();
    }

    /**
     * 日志的名字，格式：taskName_yyyyMMddHHmmss(时间格式)
     *
     * @return logName
     */
    public String getLogName() {
        return logName;
    }

    /**
     * 日志的名字，格式：taskName_yyyyMMddHHmmss(时间格式)
     *
     * @param logName
     */
    public void setLogName(String logName) {
        this.logName = logName == null ? null : logName.trim();
    }

    /**
     * 触发时间
     *
     * @return triggerTime
     */
    public Date getTriggerTime() {
        return triggerTime;
    }

    /**
     * 触发时间
     *
     * @param triggerTime
     */
    public void setTriggerTime(Date triggerTime) {
        this.triggerTime = triggerTime;
    }

    /**
     * 开始时间
     *
     * @return startTime
     */
    public Date getStartTime() {
        return startTime;
    }

    /**
     * 开始时间
     *
     * @param startTime
     */
    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    /**
     * 执行时间
     *
     * @return executeTime
     */
    public Date getExecuteTime() {
        return executeTime;
    }

    /**
     * 执行时间
     *
     * @param executeTime
     */
    public void setExecuteTime(Date executeTime) {
        this.executeTime = executeTime;
    }

    /**
     * 运行时间，暂时为保留字段
     *
     * @return runningTime
     */
    public Date getRunningTime() {
        return runningTime;
    }

    /**
     * 运行时间，暂时为保留字段
     *
     * @param runningTime
     */
    public void setRunningTime(Date runningTime) {
        this.runningTime = runningTime;
    }

    /**
     * 结束时间
     *
     * @return endTime
     */
    public Date getEndTime() {
        return endTime;
    }

    /**
     * 结束时间
     *
     * @param endTime
     */
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    /**
     * 自动调度1；手动执行0; 补数2
     *
     * @return executeType
     */
    public Integer getExecuteType() {
        return executeType;
    }

    /**
     * 自动调度1；手动执行0; 补数2
     *
     * @param executeType
     */
    public void setExecuteType(Integer executeType) {
        this.executeType = executeType;
    }

    /**
     * 执行引擎
     *
     * @return runEngine
     */
    public String getRunEngine() {
        return runEngine;
    }

    /**
     * 执行引擎
     *
     * @param runEngine
     */
    public void setRunEngine(String runEngine) {
        this.runEngine = runEngine == null ? null : runEngine.trim();
    }

    /**
     * run script result code: 0 is success ; others are failed
     *
     * @return returnCode
     */
    public Integer getReturnCode() {
        return returnCode;
    }

    /**
     * run script result code: 0 is success ; others are failed
     *
     * @param returnCode
     */
    public void setReturnCode(Integer returnCode) {
        this.returnCode = returnCode;
    }

    /**
     * 执行命令的返回信息
     *
     * @return returnMsg
     */
    public String getReturnMsg() {
        return returnMsg;
    }

    /**
     * 执行命令的返回信息
     *
     * @param returnMsg
     */
    public void setReturnMsg(String returnMsg) {
        this.returnMsg = returnMsg == null ? null : returnMsg.trim();
    }

    /**
     * 补数的日期
     *
     * @return fillDataTime
     */
    public String getFillDataTime() {
        return fillDataTime;
    }

    /**
     * 补数的日期
     *
     * @param fillDataTime
     */
    public void setFillDataTime(String fillDataTime) {
        this.fillDataTime = fillDataTime == null ? null : fillDataTime.trim();
    }

    /**
     * 批次号
     *
     * @return batchNumber
     */
    public Long getBatchNumber() {
        return batchNumber;
    }

    /**
     * 批次号
     *
     * @param batchNumber
     */
    public void setBatchNumber(Long batchNumber) {
        this.batchNumber = batchNumber;
    }

    /**
     * 重跑补数批次号
     *
     * @return rerunBatchNumber
     */
    public Long getRerunBatchNumber() {
        return rerunBatchNumber;
    }

    /**
     * 重跑补数批次号
     *
     * @param rerunBatchNumber
     */
    public void setRerunBatchNumber(Long rerunBatchNumber) {
        this.rerunBatchNumber = rerunBatchNumber;
    }

    /**
     * 是否结束，0否1是
     *
     * @return isEnd
     */
    public Boolean getIsEnd() {
        return isEnd;
    }

    /**
     * 是否结束，0否1是
     *
     * @param isEnd
     */
    public void setIsEnd(Boolean isEnd) {
        this.isEnd = isEnd;
    }

    /**
     * 创建时间
     *
     * @return createTime
     */
    public Date getCreateTime() {
        return createTime;
    }

    /**
     * 创建时间
     *
     * @param createTime
     */
    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    /**
     * 更新时间
     *
     * @return updateTime
     */
    public Date getUpdateTime() {
        return updateTime;
    }

    /**
     * 更新时间
     *
     * @param updateTime
     */
    public void setUpdateTime(Date updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        TbClockworkTaskLog other = (TbClockworkTaskLog) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getTaskId() == null ? other.getTaskId() == null : this.getTaskId().equals(other.getTaskId()))
            && (this.getTaskName() == null ? other.getTaskName() == null : this.getTaskName().equals(other.getTaskName()))
            && (this.getGroupId() == null ? other.getGroupId() == null : this.getGroupId().equals(other.getGroupId()))
            && (this.getNodeId() == null ? other.getNodeId() == null : this.getNodeId().equals(other.getNodeId()))
            && (this.getStatus() == null ? other.getStatus() == null : this.getStatus().equals(other.getStatus()))
            && (this.getPid() == null ? other.getPid() == null : this.getPid().equals(other.getPid()))
            && (this.getRealCommand() == null ? other.getRealCommand() == null : this.getRealCommand().equals(other.getRealCommand()))
            && (this.getParameter() == null ? other.getParameter() == null : this.getParameter().equals(other.getParameter()))
            && (this.getLogName() == null ? other.getLogName() == null : this.getLogName().equals(other.getLogName()))
            && (this.getTriggerTime() == null ? other.getTriggerTime() == null : this.getTriggerTime().equals(other.getTriggerTime()))
            && (this.getStartTime() == null ? other.getStartTime() == null : this.getStartTime().equals(other.getStartTime()))
            && (this.getExecuteTime() == null ? other.getExecuteTime() == null : this.getExecuteTime().equals(other.getExecuteTime()))
            && (this.getRunningTime() == null ? other.getRunningTime() == null : this.getRunningTime().equals(other.getRunningTime()))
            && (this.getEndTime() == null ? other.getEndTime() == null : this.getEndTime().equals(other.getEndTime()))
            && (this.getExecuteType() == null ? other.getExecuteType() == null : this.getExecuteType().equals(other.getExecuteType()))
            && (this.getRunEngine() == null ? other.getRunEngine() == null : this.getRunEngine().equals(other.getRunEngine()))
            && (this.getReturnCode() == null ? other.getReturnCode() == null : this.getReturnCode().equals(other.getReturnCode()))
            && (this.getReturnMsg() == null ? other.getReturnMsg() == null : this.getReturnMsg().equals(other.getReturnMsg()))
            && (this.getFillDataTime() == null ? other.getFillDataTime() == null : this.getFillDataTime().equals(other.getFillDataTime()))
            && (this.getBatchNumber() == null ? other.getBatchNumber() == null : this.getBatchNumber().equals(other.getBatchNumber()))
            && (this.getRerunBatchNumber() == null ? other.getRerunBatchNumber() == null : this.getRerunBatchNumber().equals(other.getRerunBatchNumber()))
            && (this.getIsEnd() == null ? other.getIsEnd() == null : this.getIsEnd().equals(other.getIsEnd()))
            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))
            && (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getTaskId() == null) ? 0 : getTaskId().hashCode());
        result = prime * result + ((getTaskName() == null) ? 0 : getTaskName().hashCode());
        result = prime * result + ((getGroupId() == null) ? 0 : getGroupId().hashCode());
        result = prime * result + ((getNodeId() == null) ? 0 : getNodeId().hashCode());
        result = prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());
        result = prime * result + ((getPid() == null) ? 0 : getPid().hashCode());
        result = prime * result + ((getRealCommand() == null) ? 0 : getRealCommand().hashCode());
        result = prime * result + ((getParameter() == null) ? 0 : getParameter().hashCode());
        result = prime * result + ((getLogName() == null) ? 0 : getLogName().hashCode());
        result = prime * result + ((getTriggerTime() == null) ? 0 : getTriggerTime().hashCode());
        result = prime * result + ((getStartTime() == null) ? 0 : getStartTime().hashCode());
        result = prime * result + ((getExecuteTime() == null) ? 0 : getExecuteTime().hashCode());
        result = prime * result + ((getRunningTime() == null) ? 0 : getRunningTime().hashCode());
        result = prime * result + ((getEndTime() == null) ? 0 : getEndTime().hashCode());
        result = prime * result + ((getExecuteType() == null) ? 0 : getExecuteType().hashCode());
        result = prime * result + ((getRunEngine() == null) ? 0 : getRunEngine().hashCode());
        result = prime * result + ((getReturnCode() == null) ? 0 : getReturnCode().hashCode());
        result = prime * result + ((getReturnMsg() == null) ? 0 : getReturnMsg().hashCode());
        result = prime * result + ((getFillDataTime() == null) ? 0 : getFillDataTime().hashCode());
        result = prime * result + ((getBatchNumber() == null) ? 0 : getBatchNumber().hashCode());
        result = prime * result + ((getRerunBatchNumber() == null) ? 0 : getRerunBatchNumber().hashCode());
        result = prime * result + ((getIsEnd() == null) ? 0 : getIsEnd().hashCode());
        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());
        result = prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", taskId=").append(taskId);
        sb.append(", taskName=").append(taskName);
        sb.append(", groupId=").append(groupId);
        sb.append(", nodeId=").append(nodeId);
        sb.append(", status=").append(status);
        sb.append(", pid=").append(pid);
        sb.append(", realCommand=").append(realCommand);
        sb.append(", parameter=").append(parameter);
        sb.append(", logName=").append(logName);
        sb.append(", triggerTime=").append(triggerTime);
        sb.append(", startTime=").append(startTime);
        sb.append(", executeTime=").append(executeTime);
        sb.append(", runningTime=").append(runningTime);
        sb.append(", endTime=").append(endTime);
        sb.append(", executeType=").append(executeType);
        sb.append(", runEngine=").append(runEngine);
        sb.append(", returnCode=").append(returnCode);
        sb.append(", returnMsg=").append(returnMsg);
        sb.append(", fillDataTime=").append(fillDataTime);
        sb.append(", batchNumber=").append(batchNumber);
        sb.append(", rerunBatchNumber=").append(rerunBatchNumber);
        sb.append(", isEnd=").append(isEnd);
        sb.append(", createTime=").append(createTime);
        sb.append(", updateTime=").append(updateTime);
        sb.append("]");
        return sb.toString();
    }
}