/**
 * This file is automatically generated by MyBatis Generator, do not modify.
 */
package com.creditease.adx.clockwork.common.entity.gen;

import java.util.Date;

public class TbClockworkTask {
    /**
     * 主键
     */
    private Integer id;

    /**
     * 任务名
     */
    private String name;

    /**
     * 别名
     */
    private String aliasName;

    /**
     * 描述
     */
    private String description;

    /**
     * dag Id
     */
    private Integer dagId;

    /**
     * 任务组id
     */
    private Integer groupId;

    /**
     * 执行机组id
     */
    private Integer nodeGid;

    /**
     * 脚本目录
     */
    private String location;

    /**
     * 脚本名称
     */
    private String scriptName;

    /**
     * 脚本类型：sh/python
     */
    private String scriptType;

    /**
     * 脚本传递的参数，放在脚本后面
     */
    private String scriptParameter;

    /**
     * 运行命令，自动生成
     */
    private String command;

    /**
     * json格式脚本内部变量
     */
    private String parameter;

    /**
     * 触发方式: 0依赖触发; 1时间触发; 2是时间触发and依赖触发; 3信号触发
     */
    private Integer triggerMode;

    /**
     * cron 表达式
     */
    private String cronExp;

    /**
     * 触发时间
     */
    private Date triggerTime;

    /**
     * 下一次触发时间
     */
    private Date nextTriggerTime;

    /**
     * 时间类型: minute，hour，day，week，month，year，century
     */
    private String timeType;

    /**
     * 运行频率 例如10分钟/次，10小时/次，1天/次，1周/次，1月/次，1年/次，1世纪/次
     */
    private Integer runFrequency;

    /**
     * 依赖的taskId，多个的话则逗号分割
     */
    private String dependencyId;

    /**
     * 失效时间
     */
    private Date expiredTime;

    /**
     * 失败重试次数
     */
    private Integer failedRetries;

    /**
     * 任务状态
     */
    private String status;

    /**
     * 0自延迟1父延迟2自延迟恢复3父延迟恢复
     */
    private Integer delayStatus;

    /**
     * 1 在线,0 下线
     */
    private Boolean online;

    /**
     * 上次开始时间
     */
    private Date lastStartTime;

    /**
     * 上次结束时间
     */
    private Date lastEndTime;

    /**
     * 任务超时分钟数
     */
    private Integer runTimeout;

    /**
     * 执行引擎
     */
    private String runEngine;

    /**
     * 1私有,0公有
     */
    private Boolean isPrivate;

    /**
     * 是否属于作业流的第一个作业:1是,0否
     */
    private Boolean isFirst;

    /**
     * 是否同步脚本
     */
    private Boolean isSyncFile;

    /**
     * 是否替换脚本参数
     */
    private Boolean isReplace;

    /**
     * 来源,0调度系统,1adx
     */
    private Integer source;

    /**
     * 代理用户,执行脚本的时候需要切换到这个用户
     */
    private String proxyUser;

    /**
     * 任务周期批次号，dw任务需要计算
     */
    private Long batchNumber;

    /**
     * 目前存储此任务对应中台表相关任务的表名
     */
    private String businessInfo;

    /**
     * 作者
     */
    private String createUser;

    /**
     * 最后操作人
     */
    private String operatorName;

    /**
     * 发送邮件列表
     */
    private String emailList;

    /**
     * 创建时间
     */
    private Date createTime;

    /**
     * 更新时间
     */
    private Date updateTime;

    /**
     * 任务绑定的关键词
     */
    private String errorKeywordIds;

    /**
     * 主键
     *
     * @return id
     */
    public Integer getId() {
        return id;
    }

    /**
     * 主键
     *
     * @param id
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * 任务名
     *
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 任务名
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name == null ? null : name.trim();
    }

    /**
     * 别名
     *
     * @return aliasName
     */
    public String getAliasName() {
        return aliasName;
    }

    /**
     * 别名
     *
     * @param aliasName
     */
    public void setAliasName(String aliasName) {
        this.aliasName = aliasName == null ? null : aliasName.trim();
    }

    /**
     * 描述
     *
     * @return description
     */
    public String getDescription() {
        return description;
    }

    /**
     * 描述
     *
     * @param description
     */
    public void setDescription(String description) {
        this.description = description == null ? null : description.trim();
    }

    /**
     * dag Id
     *
     * @return dagId
     */
    public Integer getDagId() {
        return dagId;
    }

    /**
     * dag Id
     *
     * @param dagId
     */
    public void setDagId(Integer dagId) {
        this.dagId = dagId;
    }

    /**
     * 任务组id
     *
     * @return groupId
     */
    public Integer getGroupId() {
        return groupId;
    }

    /**
     * 任务组id
     *
     * @param groupId
     */
    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }

    /**
     * 执行机组id
     *
     * @return nodeGid
     */
    public Integer getNodeGid() {
        return nodeGid;
    }

    /**
     * 执行机组id
     *
     * @param nodeGid
     */
    public void setNodeGid(Integer nodeGid) {
        this.nodeGid = nodeGid;
    }

    /**
     * 脚本目录
     *
     * @return location
     */
    public String getLocation() {
        return location;
    }

    /**
     * 脚本目录
     *
     * @param location
     */
    public void setLocation(String location) {
        this.location = location == null ? null : location.trim();
    }

    /**
     * 脚本名称
     *
     * @return scriptName
     */
    public String getScriptName() {
        return scriptName;
    }

    /**
     * 脚本名称
     *
     * @param scriptName
     */
    public void setScriptName(String scriptName) {
        this.scriptName = scriptName == null ? null : scriptName.trim();
    }

    /**
     * 脚本类型：sh/python
     *
     * @return scriptType
     */
    public String getScriptType() {
        return scriptType;
    }

    /**
     * 脚本类型：sh/python
     *
     * @param scriptType
     */
    public void setScriptType(String scriptType) {
        this.scriptType = scriptType == null ? null : scriptType.trim();
    }

    /**
     * 脚本传递的参数，放在脚本后面
     *
     * @return scriptParameter
     */
    public String getScriptParameter() {
        return scriptParameter;
    }

    /**
     * 脚本传递的参数，放在脚本后面
     *
     * @param scriptParameter
     */
    public void setScriptParameter(String scriptParameter) {
        this.scriptParameter = scriptParameter == null ? null : scriptParameter.trim();
    }

    /**
     * 运行命令，自动生成
     *
     * @return command
     */
    public String getCommand() {
        return command;
    }

    /**
     * 运行命令，自动生成
     *
     * @param command
     */
    public void setCommand(String command) {
        this.command = command == null ? null : command.trim();
    }

    /**
     * json格式脚本内部变量
     *
     * @return parameter
     */
    public String getParameter() {
        return parameter;
    }

    /**
     * json格式脚本内部变量
     *
     * @param parameter
     */
    public void setParameter(String parameter) {
        this.parameter = parameter == null ? null : parameter.trim();
    }

    /**
     * 触发方式: 0依赖触发; 1时间触发; 2是时间触发and依赖触发; 3信号触发
     *
     * @return triggerMode
     */
    public Integer getTriggerMode() {
        return triggerMode;
    }

    /**
     * 触发方式: 0依赖触发; 1时间触发; 2是时间触发and依赖触发; 3信号触发
     *
     * @param triggerMode
     */
    public void setTriggerMode(Integer triggerMode) {
        this.triggerMode = triggerMode;
    }

    /**
     * cron 表达式
     *
     * @return cronExp
     */
    public String getCronExp() {
        return cronExp;
    }

    /**
     * cron 表达式
     *
     * @param cronExp
     */
    public void setCronExp(String cronExp) {
        this.cronExp = cronExp == null ? null : cronExp.trim();
    }

    /**
     * 触发时间
     *
     * @return triggerTime
     */
    public Date getTriggerTime() {
        return triggerTime;
    }

    /**
     * 触发时间
     *
     * @param triggerTime
     */
    public void setTriggerTime(Date triggerTime) {
        this.triggerTime = triggerTime;
    }

    /**
     * 下一次触发时间
     *
     * @return nextTriggerTime
     */
    public Date getNextTriggerTime() {
        return nextTriggerTime;
    }

    /**
     * 下一次触发时间
     *
     * @param nextTriggerTime
     */
    public void setNextTriggerTime(Date nextTriggerTime) {
        this.nextTriggerTime = nextTriggerTime;
    }

    /**
     * 时间类型: minute，hour，day，week，month，year，century
     *
     * @return timeType
     */
    public String getTimeType() {
        return timeType;
    }

    /**
     * 时间类型: minute，hour，day，week，month，year，century
     *
     * @param timeType
     */
    public void setTimeType(String timeType) {
        this.timeType = timeType == null ? null : timeType.trim();
    }

    /**
     * 运行频率 例如10分钟/次，10小时/次，1天/次，1周/次，1月/次，1年/次，1世纪/次
     *
     * @return runFrequency
     */
    public Integer getRunFrequency() {
        return runFrequency;
    }

    /**
     * 运行频率 例如10分钟/次，10小时/次，1天/次，1周/次，1月/次，1年/次，1世纪/次
     *
     * @param runFrequency
     */
    public void setRunFrequency(Integer runFrequency) {
        this.runFrequency = runFrequency;
    }

    /**
     * 依赖的taskId，多个的话则逗号分割
     *
     * @return dependencyId
     */
    public String getDependencyId() {
        return dependencyId;
    }

    /**
     * 依赖的taskId，多个的话则逗号分割
     *
     * @param dependencyId
     */
    public void setDependencyId(String dependencyId) {
        this.dependencyId = dependencyId == null ? null : dependencyId.trim();
    }

    /**
     * 失效时间
     *
     * @return expiredTime
     */
    public Date getExpiredTime() {
        return expiredTime;
    }

    /**
     * 失效时间
     *
     * @param expiredTime
     */
    public void setExpiredTime(Date expiredTime) {
        this.expiredTime = expiredTime;
    }

    /**
     * 失败重试次数
     *
     * @return failedRetries
     */
    public Integer getFailedRetries() {
        return failedRetries;
    }

    /**
     * 失败重试次数
     *
     * @param failedRetries
     */
    public void setFailedRetries(Integer failedRetries) {
        this.failedRetries = failedRetries;
    }

    /**
     * 任务状态
     *
     * @return status
     */
    public String getStatus() {
        return status;
    }

    /**
     * 任务状态
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status == null ? null : status.trim();
    }

    /**
     * 0自延迟1父延迟2自延迟恢复3父延迟恢复
     *
     * @return delayStatus
     */
    public Integer getDelayStatus() {
        return delayStatus;
    }

    /**
     * 0自延迟1父延迟2自延迟恢复3父延迟恢复
     *
     * @param delayStatus
     */
    public void setDelayStatus(Integer delayStatus) {
        this.delayStatus = delayStatus;
    }

    /**
     * 1 在线,0 下线
     *
     * @return online
     */
    public Boolean getOnline() {
        return online;
    }

    /**
     * 1 在线,0 下线
     *
     * @param online
     */
    public void setOnline(Boolean online) {
        this.online = online;
    }

    /**
     * 上次开始时间
     *
     * @return lastStartTime
     */
    public Date getLastStartTime() {
        return lastStartTime;
    }

    /**
     * 上次开始时间
     *
     * @param lastStartTime
     */
    public void setLastStartTime(Date lastStartTime) {
        this.lastStartTime = lastStartTime;
    }

    /**
     * 上次结束时间
     *
     * @return lastEndTime
     */
    public Date getLastEndTime() {
        return lastEndTime;
    }

    /**
     * 上次结束时间
     *
     * @param lastEndTime
     */
    public void setLastEndTime(Date lastEndTime) {
        this.lastEndTime = lastEndTime;
    }

    /**
     * 任务超时分钟数
     *
     * @return runTimeout
     */
    public Integer getRunTimeout() {
        return runTimeout;
    }

    /**
     * 任务超时分钟数
     *
     * @param runTimeout
     */
    public void setRunTimeout(Integer runTimeout) {
        this.runTimeout = runTimeout;
    }

    /**
     * 执行引擎
     *
     * @return runEngine
     */
    public String getRunEngine() {
        return runEngine;
    }

    /**
     * 执行引擎
     *
     * @param runEngine
     */
    public void setRunEngine(String runEngine) {
        this.runEngine = runEngine == null ? null : runEngine.trim();
    }

    /**
     * 1私有,0公有
     *
     * @return isPrivate
     */
    public Boolean getIsPrivate() {
        return isPrivate;
    }

    /**
     * 1私有,0公有
     *
     * @param isPrivate
     */
    public void setIsPrivate(Boolean isPrivate) {
        this.isPrivate = isPrivate;
    }

    /**
     * 是否属于作业流的第一个作业:1是,0否
     *
     * @return isFirst
     */
    public Boolean getIsFirst() {
        return isFirst;
    }

    /**
     * 是否属于作业流的第一个作业:1是,0否
     *
     * @param isFirst
     */
    public void setIsFirst(Boolean isFirst) {
        this.isFirst = isFirst;
    }

    /**
     * 是否同步脚本
     *
     * @return isSyncFile
     */
    public Boolean getIsSyncFile() {
        return isSyncFile;
    }

    /**
     * 是否同步脚本
     *
     * @param isSyncFile
     */
    public void setIsSyncFile(Boolean isSyncFile) {
        this.isSyncFile = isSyncFile;
    }

    /**
     * 是否替换脚本参数
     *
     * @return isReplace
     */
    public Boolean getIsReplace() {
        return isReplace;
    }

    /**
     * 是否替换脚本参数
     *
     * @param isReplace
     */
    public void setIsReplace(Boolean isReplace) {
        this.isReplace = isReplace;
    }

    /**
     * 来源,0调度系统,1adx
     *
     * @return source
     */
    public Integer getSource() {
        return source;
    }

    /**
     * 来源,0调度系统,1adx
     *
     * @param source
     */
    public void setSource(Integer source) {
        this.source = source;
    }

    /**
     * 代理用户,执行脚本的时候需要切换到这个用户
     *
     * @return proxyUser
     */
    public String getProxyUser() {
        return proxyUser;
    }

    /**
     * 代理用户,执行脚本的时候需要切换到这个用户
     *
     * @param proxyUser
     */
    public void setProxyUser(String proxyUser) {
        this.proxyUser = proxyUser == null ? null : proxyUser.trim();
    }

    /**
     * 任务周期批次号，dw任务需要计算
     *
     * @return batchNumber
     */
    public Long getBatchNumber() {
        return batchNumber;
    }

    /**
     * 任务周期批次号，dw任务需要计算
     *
     * @param batchNumber
     */
    public void setBatchNumber(Long batchNumber) {
        this.batchNumber = batchNumber;
    }

    /**
     * 目前存储此任务对应中台表相关任务的表名
     *
     * @return businessInfo
     */
    public String getBusinessInfo() {
        return businessInfo;
    }

    /**
     * 目前存储此任务对应中台表相关任务的表名
     *
     * @param businessInfo
     */
    public void setBusinessInfo(String businessInfo) {
        this.businessInfo = businessInfo == null ? null : businessInfo.trim();
    }

    /**
     * 作者
     *
     * @return createUser
     */
    public String getCreateUser() {
        return createUser;
    }

    /**
     * 作者
     *
     * @param createUser
     */
    public void setCreateUser(String createUser) {
        this.createUser = createUser == null ? null : createUser.trim();
    }

    /**
     * 最后操作人
     *
     * @return operatorName
     */
    public String getOperatorName() {
        return operatorName;
    }

    /**
     * 最后操作人
     *
     * @param operatorName
     */
    public void setOperatorName(String operatorName) {
        this.operatorName = operatorName == null ? null : operatorName.trim();
    }

    /**
     * 发送邮件列表
     *
     * @return emailList
     */
    public String getEmailList() {
        return emailList;
    }

    /**
     * 发送邮件列表
     *
     * @param emailList
     */
    public void setEmailList(String emailList) {
        this.emailList = emailList == null ? null : emailList.trim();
    }

    /**
     * 创建时间
     *
     * @return createTime
     */
    public Date getCreateTime() {
        return createTime;
    }

    /**
     * 创建时间
     *
     * @param createTime
     */
    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    /**
     * 更新时间
     *
     * @return updateTime
     */
    public Date getUpdateTime() {
        return updateTime;
    }

    /**
     * 更新时间
     *
     * @param updateTime
     */
    public void setUpdateTime(Date updateTime) {
        this.updateTime = updateTime;
    }

    /**
     * 任务绑定的关键词
     *
     * @return errorKeywordIds
     */
    public String getErrorKeywordIds() {
        return errorKeywordIds;
    }

    /**
     * 任务绑定的关键词
     *
     * @param errorKeywordIds
     */
    public void setErrorKeywordIds(String errorKeywordIds) {
        this.errorKeywordIds = errorKeywordIds == null ? null : errorKeywordIds.trim();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        TbClockworkTask other = (TbClockworkTask) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getName() == null ? other.getName() == null : this.getName().equals(other.getName()))
            && (this.getAliasName() == null ? other.getAliasName() == null : this.getAliasName().equals(other.getAliasName()))
            && (this.getDescription() == null ? other.getDescription() == null : this.getDescription().equals(other.getDescription()))
            && (this.getDagId() == null ? other.getDagId() == null : this.getDagId().equals(other.getDagId()))
            && (this.getGroupId() == null ? other.getGroupId() == null : this.getGroupId().equals(other.getGroupId()))
            && (this.getNodeGid() == null ? other.getNodeGid() == null : this.getNodeGid().equals(other.getNodeGid()))
            && (this.getLocation() == null ? other.getLocation() == null : this.getLocation().equals(other.getLocation()))
            && (this.getScriptName() == null ? other.getScriptName() == null : this.getScriptName().equals(other.getScriptName()))
            && (this.getScriptType() == null ? other.getScriptType() == null : this.getScriptType().equals(other.getScriptType()))
            && (this.getScriptParameter() == null ? other.getScriptParameter() == null : this.getScriptParameter().equals(other.getScriptParameter()))
            && (this.getCommand() == null ? other.getCommand() == null : this.getCommand().equals(other.getCommand()))
            && (this.getParameter() == null ? other.getParameter() == null : this.getParameter().equals(other.getParameter()))
            && (this.getTriggerMode() == null ? other.getTriggerMode() == null : this.getTriggerMode().equals(other.getTriggerMode()))
            && (this.getCronExp() == null ? other.getCronExp() == null : this.getCronExp().equals(other.getCronExp()))
            && (this.getTriggerTime() == null ? other.getTriggerTime() == null : this.getTriggerTime().equals(other.getTriggerTime()))
            && (this.getNextTriggerTime() == null ? other.getNextTriggerTime() == null : this.getNextTriggerTime().equals(other.getNextTriggerTime()))
            && (this.getTimeType() == null ? other.getTimeType() == null : this.getTimeType().equals(other.getTimeType()))
            && (this.getRunFrequency() == null ? other.getRunFrequency() == null : this.getRunFrequency().equals(other.getRunFrequency()))
            && (this.getDependencyId() == null ? other.getDependencyId() == null : this.getDependencyId().equals(other.getDependencyId()))
            && (this.getExpiredTime() == null ? other.getExpiredTime() == null : this.getExpiredTime().equals(other.getExpiredTime()))
            && (this.getFailedRetries() == null ? other.getFailedRetries() == null : this.getFailedRetries().equals(other.getFailedRetries()))
            && (this.getStatus() == null ? other.getStatus() == null : this.getStatus().equals(other.getStatus()))
            && (this.getDelayStatus() == null ? other.getDelayStatus() == null : this.getDelayStatus().equals(other.getDelayStatus()))
            && (this.getOnline() == null ? other.getOnline() == null : this.getOnline().equals(other.getOnline()))
            && (this.getLastStartTime() == null ? other.getLastStartTime() == null : this.getLastStartTime().equals(other.getLastStartTime()))
            && (this.getLastEndTime() == null ? other.getLastEndTime() == null : this.getLastEndTime().equals(other.getLastEndTime()))
            && (this.getRunTimeout() == null ? other.getRunTimeout() == null : this.getRunTimeout().equals(other.getRunTimeout()))
            && (this.getRunEngine() == null ? other.getRunEngine() == null : this.getRunEngine().equals(other.getRunEngine()))
            && (this.getIsPrivate() == null ? other.getIsPrivate() == null : this.getIsPrivate().equals(other.getIsPrivate()))
            && (this.getIsFirst() == null ? other.getIsFirst() == null : this.getIsFirst().equals(other.getIsFirst()))
            && (this.getIsSyncFile() == null ? other.getIsSyncFile() == null : this.getIsSyncFile().equals(other.getIsSyncFile()))
            && (this.getIsReplace() == null ? other.getIsReplace() == null : this.getIsReplace().equals(other.getIsReplace()))
            && (this.getSource() == null ? other.getSource() == null : this.getSource().equals(other.getSource()))
            && (this.getProxyUser() == null ? other.getProxyUser() == null : this.getProxyUser().equals(other.getProxyUser()))
            && (this.getBatchNumber() == null ? other.getBatchNumber() == null : this.getBatchNumber().equals(other.getBatchNumber()))
            && (this.getBusinessInfo() == null ? other.getBusinessInfo() == null : this.getBusinessInfo().equals(other.getBusinessInfo()))
            && (this.getCreateUser() == null ? other.getCreateUser() == null : this.getCreateUser().equals(other.getCreateUser()))
            && (this.getOperatorName() == null ? other.getOperatorName() == null : this.getOperatorName().equals(other.getOperatorName()))
            && (this.getEmailList() == null ? other.getEmailList() == null : this.getEmailList().equals(other.getEmailList()))
            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))
            && (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))
            && (this.getErrorKeywordIds() == null ? other.getErrorKeywordIds() == null : this.getErrorKeywordIds().equals(other.getErrorKeywordIds()));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getName() == null) ? 0 : getName().hashCode());
        result = prime * result + ((getAliasName() == null) ? 0 : getAliasName().hashCode());
        result = prime * result + ((getDescription() == null) ? 0 : getDescription().hashCode());
        result = prime * result + ((getDagId() == null) ? 0 : getDagId().hashCode());
        result = prime * result + ((getGroupId() == null) ? 0 : getGroupId().hashCode());
        result = prime * result + ((getNodeGid() == null) ? 0 : getNodeGid().hashCode());
        result = prime * result + ((getLocation() == null) ? 0 : getLocation().hashCode());
        result = prime * result + ((getScriptName() == null) ? 0 : getScriptName().hashCode());
        result = prime * result + ((getScriptType() == null) ? 0 : getScriptType().hashCode());
        result = prime * result + ((getScriptParameter() == null) ? 0 : getScriptParameter().hashCode());
        result = prime * result + ((getCommand() == null) ? 0 : getCommand().hashCode());
        result = prime * result + ((getParameter() == null) ? 0 : getParameter().hashCode());
        result = prime * result + ((getTriggerMode() == null) ? 0 : getTriggerMode().hashCode());
        result = prime * result + ((getCronExp() == null) ? 0 : getCronExp().hashCode());
        result = prime * result + ((getTriggerTime() == null) ? 0 : getTriggerTime().hashCode());
        result = prime * result + ((getNextTriggerTime() == null) ? 0 : getNextTriggerTime().hashCode());
        result = prime * result + ((getTimeType() == null) ? 0 : getTimeType().hashCode());
        result = prime * result + ((getRunFrequency() == null) ? 0 : getRunFrequency().hashCode());
        result = prime * result + ((getDependencyId() == null) ? 0 : getDependencyId().hashCode());
        result = prime * result + ((getExpiredTime() == null) ? 0 : getExpiredTime().hashCode());
        result = prime * result + ((getFailedRetries() == null) ? 0 : getFailedRetries().hashCode());
        result = prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());
        result = prime * result + ((getDelayStatus() == null) ? 0 : getDelayStatus().hashCode());
        result = prime * result + ((getOnline() == null) ? 0 : getOnline().hashCode());
        result = prime * result + ((getLastStartTime() == null) ? 0 : getLastStartTime().hashCode());
        result = prime * result + ((getLastEndTime() == null) ? 0 : getLastEndTime().hashCode());
        result = prime * result + ((getRunTimeout() == null) ? 0 : getRunTimeout().hashCode());
        result = prime * result + ((getRunEngine() == null) ? 0 : getRunEngine().hashCode());
        result = prime * result + ((getIsPrivate() == null) ? 0 : getIsPrivate().hashCode());
        result = prime * result + ((getIsFirst() == null) ? 0 : getIsFirst().hashCode());
        result = prime * result + ((getIsSyncFile() == null) ? 0 : getIsSyncFile().hashCode());
        result = prime * result + ((getIsReplace() == null) ? 0 : getIsReplace().hashCode());
        result = prime * result + ((getSource() == null) ? 0 : getSource().hashCode());
        result = prime * result + ((getProxyUser() == null) ? 0 : getProxyUser().hashCode());
        result = prime * result + ((getBatchNumber() == null) ? 0 : getBatchNumber().hashCode());
        result = prime * result + ((getBusinessInfo() == null) ? 0 : getBusinessInfo().hashCode());
        result = prime * result + ((getCreateUser() == null) ? 0 : getCreateUser().hashCode());
        result = prime * result + ((getOperatorName() == null) ? 0 : getOperatorName().hashCode());
        result = prime * result + ((getEmailList() == null) ? 0 : getEmailList().hashCode());
        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());
        result = prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());
        result = prime * result + ((getErrorKeywordIds() == null) ? 0 : getErrorKeywordIds().hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", name=").append(name);
        sb.append(", aliasName=").append(aliasName);
        sb.append(", description=").append(description);
        sb.append(", dagId=").append(dagId);
        sb.append(", groupId=").append(groupId);
        sb.append(", nodeGid=").append(nodeGid);
        sb.append(", location=").append(location);
        sb.append(", scriptName=").append(scriptName);
        sb.append(", scriptType=").append(scriptType);
        sb.append(", scriptParameter=").append(scriptParameter);
        sb.append(", command=").append(command);
        sb.append(", parameter=").append(parameter);
        sb.append(", triggerMode=").append(triggerMode);
        sb.append(", cronExp=").append(cronExp);
        sb.append(", triggerTime=").append(triggerTime);
        sb.append(", nextTriggerTime=").append(nextTriggerTime);
        sb.append(", timeType=").append(timeType);
        sb.append(", runFrequency=").append(runFrequency);
        sb.append(", dependencyId=").append(dependencyId);
        sb.append(", expiredTime=").append(expiredTime);
        sb.append(", failedRetries=").append(failedRetries);
        sb.append(", status=").append(status);
        sb.append(", delayStatus=").append(delayStatus);
        sb.append(", online=").append(online);
        sb.append(", lastStartTime=").append(lastStartTime);
        sb.append(", lastEndTime=").append(lastEndTime);
        sb.append(", runTimeout=").append(runTimeout);
        sb.append(", runEngine=").append(runEngine);
        sb.append(", isPrivate=").append(isPrivate);
        sb.append(", isFirst=").append(isFirst);
        sb.append(", isSyncFile=").append(isSyncFile);
        sb.append(", isReplace=").append(isReplace);
        sb.append(", source=").append(source);
        sb.append(", proxyUser=").append(proxyUser);
        sb.append(", batchNumber=").append(batchNumber);
        sb.append(", businessInfo=").append(businessInfo);
        sb.append(", createUser=").append(createUser);
        sb.append(", operatorName=").append(operatorName);
        sb.append(", emailList=").append(emailList);
        sb.append(", createTime=").append(createTime);
        sb.append(", updateTime=").append(updateTime);
        sb.append(", errorKeywordIds=").append(errorKeywordIds);
        sb.append("]");
        return sb.toString();
    }
}